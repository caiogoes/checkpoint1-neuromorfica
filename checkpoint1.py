# -*- coding: utf-8 -*-
"""checkpoint1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKZd-NE9MfV0q6hu-hAlHR4-zofxbzz8
"""

import sqlite3
import pandas as pd
import threading
import multiprocessing
import time
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def populate():
  dados = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/COMPUTAÇÃO NEUROMÓRFICA/Checkpoint 1 - Semestre 2/Football Stadiums.csv', sep=',', encoding='latin-1')

  conexao = sqlite3.connect('/content/drive/MyDrive/Colab Notebooks/COMPUTAÇÃO NEUROMÓRFICA/Checkpoint 1 - Semestre 2/stadiums.db')

  conexao.execute('DELETE FROM stadiums')

  conexao.execute('''
      CREATE TABLE IF NOT EXISTS stadiums (
          Confederation VARCHAR,
          Stadium VARCHAR,
          City VARCHAR,
          HomeTeams VARCHAR,
          Capacity VARCHAR,
          Country VARCHAR,
          IOC VARCHAR
      )
  ''')

  for indice, linha in dados.iterrows():
      valores = tuple(linha)  # Converte a linha em uma tupla de valores
      valores = valores[1:]
      conexao.execute('INSERT INTO stadiums VALUES (?, ?, ?, ?, ?, ?, ?)', valores)

  conexao.commit()  # Salva as mudanças
  conexao.close()   # Fecha a conexão com o banco de dados

def read():
  conn = sqlite3.connect('/content/drive/MyDrive/Colab Notebooks/COMPUTAÇÃO NEUROMÓRFICA/Checkpoint 1 - Semestre 2/stadiums.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM stadiums")
  resultados = cursor.fetchall()
  conn.close()

  dados = []
  for linha in resultados:
    dados.append({"Confederation": linha[0], "Stadium": linha[1], "City": linha[2], "HomeTeams": linha[3], "Capacity": linha[4], "Country": linha[5], "IOC": linha[6]})

  print("Dados: ", dados)

def configure(data):
  Confederation = data['Confederation']
  Stadium = data['Stadium']
  City = data['City']
  HomeTeams = data['HomeTeams']
  Capacity = data['Capacity']
  Country = data['Country']
  IOC = data['IOC']

  conn = sqlite3.connect('/content/drive/MyDrive/Colab Notebooks/COMPUTAÇÃO NEUROMÓRFICA/Checkpoint 1 - Semestre 2/stadiums.db')
  conn.execute('INSERT INTO stadiums VALUES (?, ?, ?, ?, ?, ?, ?)', (Confederation, Stadium, City, HomeTeams, Capacity, Country, IOC))
  conn.commit()
  conn.close()

t0 = time.time()
obj = {'Confederation': 'teste', 'Stadium': 'teste', 'City': 'teste', 'HomeTeams': 'teste', 'Capacity': 'teste', 'Country': 'teste', 'IOC': 'teste'}

populate()
configure(obj)
read()
print(f"Tempo para retorno: {time.time() - t0}")

"""# Multiprocessing"""

t0 = time.time()
obj = {'Confederation': 'teste', 'Stadium': 'teste', 'City': 'teste', 'HomeTeams': 'teste', 'Capacity': 'teste', 'Country': 'teste', 'IOC': 'teste'}

if __name__ == "__main__":
  t1 = multiprocessing.Process(target=populate)
  t2 = multiprocessing.Process(target=configure, args=(obj,))
  t3 = multiprocessing.Process(target=read)

  t1.start()
  t2.start()
  t3.start()

  t1.join()
  t2.join()
  t3.join()

  print(f"Tempo para retorno: {time.time() - t0}")

"""## Data analysis"""

df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/COMPUTAÇÃO NEUROMÓRFICA/Checkpoint 1 - Semestre 2/Football Stadiums.csv",encoding="latin-1") #data import

df.info()

df.head()

"""## Stadium Top 10 Capacity

"""

df.sort_values(by="Capacity",ascending=False,inplace=True)
df2=df.head(10).copy()

plt.xticks(rotation=90)
sns.barplot(data=df2,x="Stadium",y="Capacity",hue="Confederation")

plt.xticks(rotation=90)
sns.barplot(data=df2,x="Stadium",y="Capacity",hue="Country")

plt.xticks(rotation=90)
sns.barplot(data=df2,x="Stadium",y="Capacity",hue="City")

"""## Histograma de capacidade"""

sns.histplot(data=df,x="Capacity")

"""## Modelo

"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

X = df[['Confederation', 'Stadium', 'City', 'Capacity', 'Country']]
y = df['IOC']

# Variáveis categóricas
label_encoders = {}
categorical_columns = ['Confederation', 'Stadium', 'City', 'Country']

for col in categorical_columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le

# Dados em treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

# Previsões no conjunto de teste
y_pred = model.predict(X_test)

# Desempenho do modelo usando a acurácia
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia do modelo: {accuracy}')